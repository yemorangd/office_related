# Vertica column name referencing

In case of applying renaming a column with the same column name as the original column name,
further selection of that column may cause unexpected behavior within same SELECT clause.

for example...
------------------------------
SELECT do_something(a) as a
      ,CASE WHEN A ~~~ THEN B
            WHEN A ~~~ THEN C
            ...
            END AS Z
        FROM some_table
------------------------------
In this case, later CASE clause still references original column A from some_table,
which function do_soemthing wasn't appllied.

First of all, you better not rename a column to the same name it started with.
In case of further references are too big ordeal to alter, than have SELECT - RENAME part as a subquery.

# Monthly updated tables
You'd better not forget it's monthly update cycles.
It is mostly based on business dates, which is quite counter-intuitive.
Opt to use daily/master tables rather than monthly/historical tables.

# be case sensitive
I know Teradata's CASE INSENSITIVE was such a strong option to manage tables,
however it didn't carried over to Vertica.
Assert upper/lower cases or be meticulous on handling alphabetic characters in your query.


# 1월 10일
# Vertica UPPER/LOWER 함수
해당 함수는 전각 영문자 'ａ', 'ｂ', 'ｃ' 식의 문자도 대문자로 변경함
쿼리에서 UPPER/LOWER 이용 시 전각문자를 특수문자처럼 치부하지 말고, 대소문자 처리 마찬가지로 적용됨을 잊지 말 것

# 1월 13일
# DOS/UNIX 파일
문서 편집기 통해 쉘파일 편집 시, DOS파일로 변환하는 일 없게끔 할 것.
라인별 마감 문자가 다른데, 쉘 스크립트 실행 환경 상 UNIX 파일 형식 그대로 유지하게끔 해야 함
# EUC-KR / UTF-8 인코딩 문제
파이썬 코드로 특정 인코딩 결과물이 깨지는지 여부 대조 가능
unicode(random_string, 'random_encoding_1').encode('random_encoding_2') ~ 이런 식

# 1월 16일
# 서비스가 기획된 방향에는 다 이유가 있다.
탑다운이건 바텀업이든, 기획/개발 양면의 히스토리를 최대한 알아두자.
'그냥 그렇게 만들어졌다' 라고 말해도 되는 서비스는 없다. 
신규개발을 하건, 개선작업을 하건 아무 히스토리도 모르고 작업하는 것은 무책임한 일이다.
# Jupyter Notebook ''/() 자동입력 안 되는 문제
출근하면 테스트해볼 것
- ~/.jupyter/custom/custom.js 파일 확인하여 
IPython.CodeCell.options_default.cm_config.autoCloseBrackets = false 과 같이 설정을 변경할 수 있는지 여부
- %config Completer.use_jedi = False 식으로 jedi를 끄거나 삭제/업데이트가 가능한지

# 1월 19일
# Vertica 텍스트 인코딩
기본적으로 모든 텍스트 데이터가 UTF-8로 핸들링 되는 것을 가정함.
이 이외의 인코딩으로 된 텍스트 데이터를 적재하는 것은 문제가 없으나, 일괄 처리가 필요할 경우
MAKEUTF8(target_string, replacement_string) 식의 함수를 써서 일괄 치환/혹은 삭제(replacement_string을 입력하지 않을 시) 가능
참조 : https://www.vertica.com/blog/quick-tip-replacing-non-utf-8-characters/

